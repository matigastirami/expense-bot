"""sync

Revision ID: 1205b25116b9
Revises: 003
Create Date: 2025-09-13 04:47:16.321850

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "1205b25116b9"
down_revision = "003"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Add user_id column to accounts table (nullable first)
    op.add_column("accounts", sa.Column("user_id", sa.Integer(), nullable=True))

    # Assign existing accounts to first available user
    op.execute("""
        UPDATE accounts
        SET user_id = (SELECT id FROM users LIMIT 1)
        WHERE user_id IS NULL
    """)

    # Make user_id NOT NULL after assigning values
    op.alter_column("accounts", "user_id", nullable=False)

    op.drop_constraint(op.f("accounts_name_key"), "accounts", type_="unique")
    op.create_index("ix_accounts_user_id", "accounts", ["user_id"], unique=False)
    op.create_unique_constraint("uq_user_account_name", "accounts", ["user_id", "name"])
    op.create_foreign_key(None, "accounts", "users", ["user_id"], ["id"])

    # Fix pending_transactions transaction_type column using raw SQL
    op.execute("ALTER TABLE pending_transactions ALTER COLUMN transaction_type TYPE transactiontype USING transaction_type::transactiontype")

    op.alter_column(
        "pending_transactions",
        "retry_count",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.alter_column(
        "pending_transactions",
        "last_error",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.create_index(
        "ix_pending_transactions_user_id",
        "pending_transactions",
        ["user_id"],
        unique=False,
    )

    # Add user_id column to transactions table (nullable first)
    op.add_column("transactions", sa.Column("user_id", sa.Integer(), nullable=True))

    # Assign existing transactions to first available user
    op.execute("""
        UPDATE transactions
        SET user_id = (SELECT id FROM users LIMIT 1)
        WHERE user_id IS NULL
    """)

    # Make user_id NOT NULL after assigning values
    op.alter_column("transactions", "user_id", nullable=False)

    op.create_index(
        "ix_transactions_user_id", "transactions", ["user_id"], unique=False
    )
    op.create_foreign_key(None, "transactions", "users", ["user_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "transactions", type_="foreignkey")
    op.drop_index("ix_transactions_user_id", table_name="transactions")
    op.drop_column("transactions", "user_id")
    op.drop_index("ix_pending_transactions_user_id", table_name="pending_transactions")
    op.alter_column(
        "pending_transactions",
        "last_error",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "pending_transactions", "retry_count", existing_type=sa.INTEGER(), nullable=True
    )

    # Revert transaction_type column using raw SQL
    op.execute("ALTER TABLE pending_transactions ALTER COLUMN transaction_type TYPE VARCHAR(10) USING transaction_type::VARCHAR(10)")

    op.drop_constraint(None, "accounts", type_="foreignkey")
    op.drop_constraint("uq_user_account_name", "accounts", type_="unique")
    op.drop_index("ix_accounts_user_id", table_name="accounts")
    op.create_unique_constraint(
        op.f("accounts_name_key"),
        "accounts",
        ["name"],
        postgresql_nulls_not_distinct=False,
    )
    op.drop_column("accounts", "user_id")
    # ### end Alembic commands ###
