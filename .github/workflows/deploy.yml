name: Deploy to AWS Lightsail

on:
  push:
    branches: [main]
    paths-ignore:
      - "terraform/**"
      - "docs/**"
      - "*.md"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Lightsail
        run: |
          # Copy docker-compose.prod.yml to server
          scp docker-compose.prod.yml ubuntu@${{ secrets.LIGHTSAIL_HOST }}:/opt/expense-tracker/docker-compose.yml

          ssh ubuntu@${{ secrets.LIGHTSAIL_HOST }} << 'EOF'
            set -e

            # Navigate to application directory
            cd /opt/expense-tracker

            # Set environment variables for docker-compose
            export DOCKER_IMAGE="$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)"
            export POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}"
            export POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"
            export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
            export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the new image
            docker compose pull

            # Stop and remove old containers
            docker compose down || true

            # Start new containers
            docker compose up -d

            # Wait for health check
            echo "Waiting for application to be healthy..."
            for i in {1..30}; do
              if curl -f http://localhost:8000/health > /dev/null 2>&1; then
                echo "Application is healthy!"
                break
              fi
              echo "Waiting for application... ($i/30)"
              sleep 10
            done

            # Cleanup old images
            docker image prune -f

            echo "Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          # Wait a moment for the service to fully start
          sleep 30

          # Check if the health endpoint responds
          if curl -f http://${{ secrets.LIGHTSAIL_HOST }}:8000/health; then
            echo "‚úÖ Deployment successful - health check passed"
          else
            echo "‚ùå Deployment failed - health check failed"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment to Lightsail completed successfully!"
            echo "üîó Health check: http://${{ secrets.LIGHTSAIL_HOST }}:8000/health"
          else
            echo "üí• Deployment failed!"
          fi
