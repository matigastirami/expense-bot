name: Deploy to AWS Lightsail

on:
  push:
    branches: [main]
    paths-ignore:
      - "'terraform/**"'
      - "'docs/**"'
      - "'*.md"'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      infrastructure-ready: ${{ steps.check.outputs.ready }}
    steps:
      - name: Check if infrastructure secrets exist
        id: check
        run: |
          if [[ -n "${{ secrets.LIGHTSAIL_HOST }}" && -n "${{ secrets.LIGHTSAIL_SSH_KEY }}" ]]; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Infrastructure secrets are available"
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "‚ùå Infrastructure secrets missing. Run Terraform first."
          fi

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
          - name: Checkout repository

      uses: actions/checkout@v4

          - name: Set up Docker Buildx

      uses: docker/setup-buildx-action@v3

          - name: Log in to Container Registry

      uses: docker/login-action@v3

      with:

        registry: ${{ env.REGISTRY }}

        username: ${{ github.actor }}

        password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: [build, check-infrastructure]
    runs-on: ubuntu-latest
    if: needs.check-infrastructure.outputs.infrastructure-ready == 'true'

    defaults:
      run:
        working-directory: terraform

    steps:
          - name: Checkout repository

      uses: actions/checkout@v4

          - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:

        terraform_version: "~1.6"
        terraform_wrapper: false

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          echo "  ConnectTimeout 30" >> ~/.ssh/config
          echo "  ServerAliveInterval 60" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

      - name: Debug SSH Configuration
        env:
          HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
        run: |
          echo "üîç Debugging SSH connection..."
          echo "Host IP: ${HOST_IP}"
          echo "SSH Agent status:"
          ssh-add -l || echo "No SSH keys loaded"
          echo ""
          echo "Testing network connectivity..."
          ping -c 3 ${HOST_IP} || echo "Host unreachable"
          echo ""
          echo "Testing SSH port..."
          nc -zv ${HOST_IP} 22 || echo "SSH port not open"
    - name: Initialize Terraform
      run: terraform init

      - name: Wait for SSH availability
        env:
          HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
        run: |
          echo "üîå Waiting for SSH to become available on ${HOST_IP}..."

          # First check if host is reachable
          if ! ping -c 1 ${HOST_IP} >/dev/null 2>&1; then
            echo "‚ùå Host ${HOST_IP} is not reachable"
    - name: Get infrastructure info from Terraform state
      id: terraform-outputs
      run: |
        echo "üîç Fetching infrastructure info from Terraform state..."

        # Get outputs from Terraform state
        HOST_IP=$(terraform output -raw static_ip)
        INSTANCE_NAME=$(terraform output -raw instance_name)
        SSH_USERNAME=$(terraform output -raw instance_username)

        # Validate outputs
        if [[ -z "$HOST_IP" || "$HOST_IP" == "null" ]]; then
          echo "‚ùå Could not get static IP from Terraform state"
          echo "üí° Make sure Terraform infrastructure is deployed first"
          exit 1
        fi

        echo "‚úÖ Retrieved infrastructure info:"
        echo "   Host IP: $HOST_IP"
        echo "   Instance: $INSTANCE_NAME"
        echo "   SSH User: $SSH_USERNAME"

        # Set outputs for subsequent steps
        echo "host-ip=$HOST_IP" >> $GITHUB_OUTPUT
        echo "instance-name=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "ssh-username=$SSH_USERNAME" >> $GITHUB_OUTPUT

    - name: Get SSH private key from Terraform state
      id: ssh-key
      run: |
        echo "üîë Extracting SSH private key from Terraform state..."

        # Extract private key and save to file
        terraform output -raw private_key > /tmp/ssh-key.pem
        chmod 600 /tmp/ssh-key.pem

        # Validate key file
        if [[ ! -s /tmp/ssh-key.pem ]]; then
          echo "‚ùå SSH private key is empty or missing"
          exit 1
        fi

        echo "‚úÖ SSH private key extracted successfully"
        echo "ssh-key-path=/tmp/ssh-key.pem" >> $GITHUB_OUTPUT

    - name: Test SSH connectivity
      env:
        HOST_IP: ${{ steps.terraform-outputs.outputs.host-ip }}
        SSH_KEY_PATH: ${{ steps.ssh-key.outputs.ssh-key-path }}
        SSH_USERNAME: ${{ steps.terraform-outputs.outputs.ssh-username }}
      run: |
        echo "üîå Testing SSH connectivity to ${HOST_IP}..."

        # Configure SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
        echo "  ConnectTimeout 30" >> ~/.ssh/config
        echo "  ServerAliveInterval 60" >> ~/.ssh/config
        chmod 600 ~/.ssh/config

        # Test network connectivity first
        echo "üì° Testing network connectivity..."
        if ! ping -c 3 ${HOST_IP}; then
          echo "‚ùå Host ${HOST_IP} is not reachable via ping"
          exit 1
        fi

        # Test SSH port
        echo "üîê Testing SSH port..."
        if ! nc -zv ${HOST_IP} 22; then
          echo "‚ùå SSH port 22 is not open on ${HOST_IP}"
          exit 1
        fi

        # Test SSH connection with retries
        echo "üîë Testing SSH authentication..."
        for i in {1..20}; do
          echo "   SSH attempt $i/20..."
          if ssh -i ${SSH_KEY_PATH} -o BatchMode=yes -o ConnectTimeout=10 ${SSH_USERNAME}@${HOST_IP} "echo 'SSH connection successful'; uptime" 2>/dev/null; then
            echo "‚úÖ SSH connection established successfully"
            break
          fi

          if [ $i -eq 20 ]; then
            echo "‚ùå SSH connection failed after 20 attempts"
            echo "üîç Debugging information:"
            echo "   Host: ${HOST_IP}"
            echo "   User: ${SSH_USERNAME}"
            echo "   Key: ${SSH_KEY_PATH}"

            # Try verbose SSH for debugging
            echo "üîç Verbose SSH attempt:"
            ssh -i ${SSH_KEY_PATH} -vvv -o BatchMode=yes -o ConnectTimeout=10 ${SSH_USERNAME}@${HOST_IP} "echo 'test'" || true
            exit 1
          fi

          sleep 15
        done

            # Check if we're at the last attempt
            if [ $i -eq 40 ]; then
              echo "‚ùå SSH connection failed after 40 attempts (6+ minutes)"
              echo "üîç Final diagnostic attempts..."
    - name: Deploy to Lightsail
      env:
        HOST_IP: ${{ steps.terraform-outputs.outputs.host-ip }}
        SSH_KEY_PATH: ${{ steps.ssh-key.outputs.ssh-key-path }}
        SSH_USERNAME: ${{ steps.terraform-outputs.outputs.ssh-username }}
        DOCKER_IMAGE: ${{ needs.build.outputs.image-tag }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
      working-directory: .
      run: |
        # Extract first image tag
        IMAGE_TAG=$(echo "${DOCKER_IMAGE}" | head -n1)
        echo "üö¢ Deploying image: ${IMAGE_TAG}"

                      # Try to get
         more info about the connection failure
              echo "Testing telnet to SSH port:"
              timeout 5 telnet -i ${SSH_KEY_PATH} ${SSH_USERNAME}${HOST_IP} 22 || echo "Telnet to port 22 failed${SSH_USERNAME}${SSH_USERNAME}"


        echo "Checking SSH key fingerprint:"
              ssh
         -i ${SSH_KEY_PATH}-keyscan ${SSH_USERNAME}${HOST_IP}
         -i ${SSH_KEY_PATH} || echo "SSH keyscan failed"${SSH_USERNAME}

              echo "‚ùå Deployment failed due to SSH connectivity issues"
              echo "üí° Possible solutions:"
              echo "   1. Run the Terraform workflow to ensure infrastructure exists"
              echo "   2. Check if the Lightsail instance is running"
              echo "   3. Verify SSH key and host secrets are correctly set"
              exit 1
            fi
        # Execute deployment
        echo "üöÄ Executing deployment..."
        ssh -i ${SSH_KEY_PATH} ${SSH_USERNAME}@${HOST_IP} "cd /opt/expense-tracker && chmod +x deploy.sh && \
          DOCKER_IMAGE='${IMAGE_TAG}' \
          POSTGRES_HOST='${POSTGRES_HOST}' \
          POSTGRES_PORT='${POSTGRES_PORT}' \
          POSTGRES_DB='${POSTGRES_DB}' \
          POSTGRES_USER='${POSTGRES_USER}' \
          POSTGRES_PASSWORD='${POSTGRES_PASSWORD}' \
          TELEGRAM_BOT_TOKEN='${TELEGRAM_BOT_TOKEN}' \
          OPENAI_API_KEY='${OPENAI_API_KEY}' \
          GITHUB_TOKEN='${GITHUB_TOKEN}' \
          GITHUB_ACTOR='${GITHUB_ACTOR}' \
          ./deploy.sh"



        stepsterraform-outputs.outputs.host-ip


        sleep 10
          done

      - name: Deploy to Lightsail
        env:
          HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
          DOCKER_IMAGE: ${{ needs.build.outputs.image-tag }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Extract first image tag
          IMAGE_TAG=$(echo "${DOCKER_IMAGE}" | head -n1)
          echo "üö¢ Deploying image: ${IMAGE_TAG}"
        # Check if the health endpoint responds
        echo "üè• Testing health endpoint..."
        if curl -f http://${HOST_IP}:8000/health; then
          echo "‚úÖ Deployment successful - health check passed"
        else
          echo "‚ùå Deployment failed - health check failed"

          # Get some debugging info
          echo "üîç Debugging deployment failure..."
          ssh -i ${{ steps.ssh-key.outputs.ssh-key-path }} ${{ steps.terraform-outputs.outputs.ssh-username }}@${HOST_IP} "cd /opt/expense-tracker && docker-compose ps && docker-compose logs --tail=50" || true

          exit 1
        fi

          # Ensure directory exists
          ssh ubuntu@${HOST_IP} "sudo mkdir -p /opt/expense-tracker && sudo chown ubuntu:ubuntu /opt/expense-tracker"

          # Copy files to server
          echo "üìÅ Copying deployment files..."
          scp docker-compose.prod.yml ubuntu@${HOST_IP}:/opt/expense-tracker/docker-compose.yml
          scp deploy.sh ubuntu@${HOST_IP}:/opt/expense-tracker/deploy.sh

          # Execute deployment
          echo "üöÄ Executing deployment..."
          ssh ubuntu@${HOST_IP} "cd /opt/expense-tracker && chmod +x deploy.sh && \
            DOCKER_IMAGE='${IMAGE_TAG}' \
            POSTGRES_HOST='${POSTGRES_HOST}' \
            POSTGRES_PORT='${POSTGRES_PORT}' \
            POSTGRES_DB='${POSTGRES_DB}' \
            POSTGRES_USER='${POSTGRES_USER}' \
            POSTGRES_PASSWORD='${POSTGRES_PASSWORD}' \
            TELEGRAM_BOT_TOKEN='${TELEGRAM_BOT_TOKEN}' \
            OPENAI_API_KEY='${OPENAI_API_KEY}' \
            GITHUB_TOKEN='${GITHUB_TOKEN}' \
            GITHUB_ACTOR='${GITHUB_ACTOR}' \
            ./deploy.sh"

      - name: Verify deployment
        env:
          HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
        run: |
          # Wait a moment for the service to fully start
          sleep 30

          # Check if the health endpoint responds
          if curl -f http://${HOST_IP}:8000/health; then
            echo "‚úÖ Deployment successful - health check passed"
          else
            echo "‚ùå Deployment failed - health check failed"
            exit 1
          fi

      - name: Notify deployment status
        env:
          HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment to Lightsail completed successfully!"
            echo "üîó Health check: http://${HOST_IP}:8000/health"
          else
            echo "üí• Deployment failed!"
          fi

  infrastructure-warning:
    needs: check-infrastructure
    runs-on: ubuntu-latest
    if: needs.check-infrastructure.outputs.infrastructure-ready == 'false'
    steps:
      - name: Infrastructure Warning
        run: |
          echo "‚ö†Ô∏è Cannot deploy: Infrastructure secrets are missing"
          echo ""
          echo "üîß To fix this, run the Terraform workflow first:"
          echo "   1. Go to Actions tab"
          echo "   2. Run 'Terraform Infrastructure' workflow"
          echo "   3. This will create the Lightsail instance and set up secrets"
          echo ""
          echo "Or trigger it by making a change to terraform/ files and pushing"
    - name: Notify deployment status
      env:
        HOST_IP: ${{ steps.terraform-outputs.outputs.host-ip }}
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment to Lightsail completed successfully!"
          echo "üîó Health check: http://${HOST_IP}:8000/health"
          echo "üìä Instance: ${{ steps.terraform-outputs.outputs.instance-name }}"
        else
          echo "üí• Deployment failed!"
          echo "üîç Check the logs above for debugging information"
        fi
