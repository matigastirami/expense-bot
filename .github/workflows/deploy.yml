name: Deploy to AWS Lightsail

on:
  push:
    branches: [main]
    paths-ignore:
      - 'terraform/**'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.LIGHTSAIL_SSH_KEY }}

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config

    - name: Deploy to Lightsail
      env:
        HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
        DOCKER_IMAGE: ${{ needs.build.outputs.image-tag }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
      run: |
        # Extract first image tag
        IMAGE_TAG=$(echo "${DOCKER_IMAGE}" | head -n1)

        # Copy files to server
        scp docker-compose.prod.yml ubuntu@${HOST_IP}:/opt/expense-tracker/docker-compose.yml
        scp deploy.sh ubuntu@${HOST_IP}:/opt/expense-tracker/deploy.sh

        # Execute deployment
        ssh ubuntu@${HOST_IP} "cd /opt/expense-tracker && chmod +x deploy.sh && \
          DOCKER_IMAGE='${IMAGE_TAG}' \
          POSTGRES_HOST='${POSTGRES_HOST}' \
          POSTGRES_PORT='${POSTGRES_PORT}' \
          POSTGRES_DB='${POSTGRES_DB}' \
          POSTGRES_USER='${POSTGRES_USER}' \
          POSTGRES_PASSWORD='${POSTGRES_PASSWORD}' \
          TELEGRAM_BOT_TOKEN='${TELEGRAM_BOT_TOKEN}' \
          OPENAI_API_KEY='${OPENAI_API_KEY}' \
          GITHUB_TOKEN='${GITHUB_TOKEN}' \
          GITHUB_ACTOR='${GITHUB_ACTOR}' \
          ./deploy.sh"

    - name: Verify deployment
      env:
        HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
      run: |
        # Wait a moment for the service to fully start
        sleep 30

        # Check if the health endpoint responds
        if curl -f http://${HOST_IP}:8000/health; then
          echo "‚úÖ Deployment successful - health check passed"
        else
          echo "‚ùå Deployment failed - health check failed"
          exit 1
        fi

    - name: Notify deployment status
      env:
        HOST_IP: ${{ secrets.LIGHTSAIL_HOST }}
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment to Lightsail completed successfully!"
          echo "üîó Health check: http://${HOST_IP}:8000/health"
        else
          echo "üí• Deployment failed!"
        fi
